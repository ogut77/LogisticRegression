# -*- coding: utf-8 -*-
"""LR+DA+RF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/ogut77/LogisticRegression/blob/master/LR%2BDA%2BRF.ipynb
"""

#import data
import pandas as pd
data=pd.read_excel("https://hogut.weebly.com/uploads/1/8/1/6/18163409/bookbinder2.xls")
#Let's see first five observation
print(data[:5])

#Descriptive Statistics
print(data.describe())

#Descriptive Statistcs of Categoric Variable Staus
data['Staus'].value_counts()

#Descriptive Statistcs of Categoric Variable Choice
#Choice is dependent variable
data['Choice'].value_counts()

#Descriptive Statistics of Numeric Variables
#when it is group by Choice ans Staus
data.groupby(['Choice','Staus']).mean()

import numpy as np
#Convert Categoric Data to 1 if Choice==Y and Choice==N 
data['Ch']=np.where(data['Choice'] =='Y', 1,0)
data.head(5)

#Split Data into Trainig and Test if Staus Trainig and TEst respectively
Training = data['Staus']=='Training'
Test = data['Staus']=='Test'
TrainingData=data[Training]
TestData=data[Test]
#Select dependent variables and independent variables for Test and Train data
X_train=TrainingData.iloc[:,:-3]
X_test=TestData.iloc[:,:-3]
y_train=TrainingData.iloc[:,-1]
y_test=TestData.iloc[:,-1]

from sklearn.ensemble import RandomForestClassifier

RFC = RandomForestClassifier()  
             
RFC.fit(X_train, y_train)  
y_pred = RFC.predict(X_test)

from sklearn.metrics import confusion_matrix,accuracy_score
print(confusion_matrix(y_test,y_pred))
print("Accuracy score is "+str(accuracy_score(y_test,y_pred)))

#Logistic Regression Model
import statsmodels.api as sm

logit_model=sm.Logit(y_train,X_train)
result=logit_model.fit()
print(result.summary2())

#Confusion Matrix and Accuracy of Test Data

Y_TestScore = result.predict(X_test)
y_pred=np.where(Y_TestScore>0.5,1,0)
print(confusion_matrix(y_pred, y_test))
print("Accuracy score is "+str(accuracy_score(y_test,y_pred)))

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA

lda = LDA(n_components=2)  
lda.fit_transform(X_train, y_train)

y_pred = lda.predict(X_test) 
print(confusion_matrix(y_test,y_pred))
print("Accuracy score is "+str(accuracy_score(y_test,y_pred)))